<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[/**
*  @FileName 	Util.js 
*/

var pForm = nexacro.Form.prototype;
//var pForm = this;		// 탭 페이지 안에 있는 그리드의 경우 this로 하면 안 먹는다.

/**
 * @class
 * @param 
 * @param 
 * @return
 */
pForm.gtrace = function(strTrc,strPos)
{
	// 주석 처리 여부가 기능에 영향을 주어서는 안된다. 
	if ( pForm.gfn_isNull(strPos)				//strPos 없이 넘어 오면 무조건 찍는다.
// 						||	strPos == "Grid.xjs.gfn_setGrid"				// 그리드 세팅
//  					||	strPos == "Grid.xjs._getUniqueId"				// 그리드의 유니크 아이디 가져오기
//						||	strPos == "Grid.xjs._getGridUserProperty"		//
//  					||	strPos == "Grid.xjs._gfnGridAddProp"			// userproperties , arrProp[i]값에 따라 sort-->objGrid.sort = 'true'--실행
//  					||	strPos == "Grid.xjs.gfn_grid_onheadclick"		// 그리드 헤드 클릭 (체크박스 : 전체선택 / 일반 : 정렬)
//  					||	strPos == "Grid.xjs._gfnHeadCheckSelectAll"		// 		-	체크박스 : 전체선택 / 전체해제)
// 						||	strPos == "Grid.xjs.gfn_grid_onrbuttondown"		// 그리드 우클릭 이벤트
//						||	strPos == "Grid.xjs._gfnMakeGridPopupMenu"		// 우클릭 팝업메뉴
//						||	strPos == "Grid.xjs.gfn_popupmenu_onmenuclick"	// 우클릭 팝업메뉴--메뉴클릭시
//						||	strPos == "Grid.xjs._gfnGridFilter"				// 필터설정
//						||	strPos == "Comm_GridFilter.xfdl.btn_filter_onclick"	// 필터적용 버튼
//						||	strPos == "Grid.xjs._gfnGridSetCssclass"		// 	틀고정 행 실행/해제
//						||	strPos == "Excel.xjs.gfn_excelExport"					// 엑셀 내보내기
// 						||	strPos == "Form_Work.xfdl.Button_onclick"
//						||	strPos == "Comm_SearchConditionFromTo.xfdl.form_onload"
//						||	strPos == "Comm_SearchConditionFromTo.xfdl.div_search_btn_onclick"
//						||	strPos == "Comm_SearchConditionFromTo.xfdl.EditFrom_onchanged"
//						||	strPos == "Comm_SearchConditionFromTo.xfdl.fn_popupCallback"
//						||	strPos == "Comm_SearchConditionFromTo.xfdl.ds_FromTo_oncolumnchanged"
// 						||	strPos == "PopupSalesOrder.xfdl.Form_onload"
// 						||	strPos == "PopupSalesOrder.xfdl.btn_ok_onclick"
// 						||	strPos == "Util_adh.xjs._getUserProperty"
// 						||	strPos == "POList.xfdl.Button_SortGroup_onclick"
// 						||	strPos == "POList.xfdl.callbackFunction"
// 						||	strPos == "Comm_SubSum.xfdl.form_onload"
//						||	strPos == "Comm_SubSum.xfdl.btn_ok_onclick"
//						||	strPos == "Comm_SubSum.xfdl.fn_getHeadTextAndBindingInfo"
//						||	strPos == "POList.xfdl.fn_reset"
						||	strPos == "Util_adh.xjs.gfn_getAllInitData"
//						||	strPos == "Util_adh.xjs.gfn_callbackFunction"
//						||	strPos == "Frame.xjs.gfn_setLanguage"
//						||	strPos == "Comm_CrudButton.btnCrud_onclick"
//						||	strPos == "Comm_CrudButton.form_onload"
//						||	strPos == "Grid.xjs._gfnGridCheckboxNoStatusAdd"
// 						||	strPos == "Transaction.xjs.gfn_callback"
// 						||	strPos == "Transaction.xjs.gfn_transaction"
//  						||	strPos == "Grid.xjs.gfn_multiDatasetChanged"

//						||	strPos == "Comm_GridAddDelButton.form_onload"
						
//  						||	strPos == "cmmGridAddDelButton.xfdl.btn_del_onclick"
//  						||	strPos == "Grid.xjs._gfn_getRowType"
// 						||	strPos == "cmmGridAddDelButton.xfdl.fn_deleteRow"
// 						||	strPos == "Validation.xjs.gfn_clearValidation"


//						||	strPos == "Validation.xjs.gfn_setValidation"
// 						||	strPos == "Validation.xjs.gfn_validation" 
// 						||	strPos == "Validation.xjs.gfn_validationCheckRule"
// 						||	strPos == "Message.xjs.gfn_alert"

)	{
		trace(strPos+"--------->"+strTrc);
	}
};

pForm._getUserProperty = function (obj,userPropertyName)
{
															var gtrcPos	= "Util_adh.xjs._getUserProperty";
	var sEvVal = obj+"."+userPropertyName;				this.gtrace("sEvVal --->"+sEvVal, gtrcPos);
	var sProp = eval(sEvVal);							this.gtrace("sProp --->"+sProp, gtrcPos);
 	var arrprop = sProp.split(",");

 	return arrprop;
														this.gtrace("------------------------------------------end------------------------------------------", gtrcPos);
};

/*********************************************************************************************
 * @type   : function
 * @access : public
 * @desc   : 현재 플랫폼의 OS종류를 구한다.
 * @param  : 
 * @return :
 *********************************************************************************************/
pForm.gfn_getOS = function ()
{
	var osVersion = system.osversion;
	
	//trace("osVersion[" + osVersion + "]")

	if ( this.gfn_isNull(osVersion) )
		return "ETC";
	
	osVersion = osVersion.toUpperCase();
		
	if ( osVersion.indexOf("ANDROID") >= 0 )	// android 
	{
		return "ANDROID";
	}
	else if ( osVersion.indexOf("IOS") >= 0 )
	{
		return "IOS";
	}
	else if ( osVersion.indexOf("WINDOWS") >= 0 )
	{
		return "WINDOWS";
	}
	else if ( osVersion.indexOf("MAC") >= 0 )
	{
		return "MAC";
	}
	else if ( osVersion.indexOf("LINUX") >= 0 )
	{
		return "LINUX";
	}
	else
	{
		return "ETC";
	}
}

/*********************************************************************************************
 * @type   : function
 * @access : public
 * @desc   : 애플리케이션이 실행되는 환경 정보를 구한다.
 * @param  : 
 * @return :
 *********************************************************************************************/
pForm.gfn_getNavigator = function ()
{
	var osNavigatorname = system.navigatorname;
	
	//trace("osVersion[" + osVersion + "]")

	if ( this.gfn_isNull(osNavigatorname) )
		return "NOT_DEFINE";
	
	osNavigatorname = osNavigatorname.toUpperCase();
	
	return osNavigatorname;
// 	if ( osNavigatorname.indexOf("ANDROID") >= 0 )	// android 
// 	{
// 		return "ANDROID";
// 	}
// 	else if ( osNavigatorname.indexOf("IOS") >= 0 )
// 	{
// 		return "IOS";
// 	}
// 	else if ( osNavigatorname.indexOf("WINDOWS") >= 0 )
// 	{
// 		return "WINDOWS";
// 	}
// 	else
// 	{
// 		return "ETC";
// 	}
}

/*********************************************************************************************
 * @type   : function
 * @access : public
 * @desc   : 현재 전체 경로를 가지고온다.
 * @param  : obj 현재 obj
 * @return :
 *********************************************************************************************/
pForm.gfn_getObjPath = function (obj)
{
	var arrPath = new Array();
	var tmpObj = obj;
	var cnt = 1;

	arrPath[0] = tmpObj.name;
	while (true) 
	{
		if (tmpObj.parent == "[object ChildFrame]") 
		{
			arrPath[cnt-1] = "application.mainframe.childframe.form";
			break;
		}

		arrPath[cnt] = tmpObj.parent.name;
		tmpObj = tmpObj.parent;
		cnt++;
	}

	var path = "";
	for (var i = arrPath.length - 1; i >= 0; i--) 
	{
		path += arrPath[i] + ".";
	}

	return path;
}

/*++
@desc	온로드 이벤트, 필요한 모든 데이터 가져옴
		-	콤보 , 권한 , 유저 , ...
*/
pForm.gfn_getAllInitData = function()
{
																		var gtrcPos = "Util_adh.xjs.gfn_getAllInitData";
	//html로부터 전달받은값, 브라우져정보
	var sQMELOGONUSERID = 	nexacro.getApplication().QmeLogonUserId;		this.gtrace("sQMELOGONUSERID--->"+sQMELOGONUSERID,gtrcPos);
	var sLANGUAGEKEY	=	nexacro.getApplication().LanguageKey;       	this.gtrace("sLANGUAGEKEY--->"+sLANGUAGEKEY,gtrcPos);
	var sNAVIGATOR		=	this.gfn_getNavigator();						this.gtrace("sNAVIGATOR---->"+sNAVIGATOR,gtrcPos);
																			this.gtrace("this.gfn_getNavigator()--->"+this.gfn_getNavigator(),gtrcPos);		//NEXACRO / IE / CHROME
	{	//	gds_QmeLogonInfo 데이터셋 세팅
		if(this.gfn_getNavigator()=="NEXACRO"){	//	넥사크로 전용브라우져 실행시 - 테스트용 데이터
				this.gtrace("nexacro.getApplication().gds_QmeLogonInfo.rowcount--->"+nexacro.getApplication().gds_QmeLogonInfo.rowcount,gtrcPos);
// 			if(nexacro.getApplication().gds_QmeLogonInfo.rowcount==0)
// 			{
				//무조건 트랜잭션
				this.gtrace("nexacro전용브라우져--TRANSYES", gtrcPos);
				nexacro.getApplication().gds_QmeLogonInfo_in.clearData();
				nexacro.getApplication().gds_QmeLogonInfo_in.addRow();
				nexacro.getApplication().gds_QmeLogonInfo_in.setColumn(0, "p_user_id", "160307");
				nexacro.getApplication().gds_Language_in.clearData();
				nexacro.getApplication().gds_Language_in.addRow();
				nexacro.getApplication().gds_Language_in.setColumn(0, "p_country_cd", "KO");		//	한국 : KO / 베트남 : VI / 인도네시아 : ID

// 			}else{
// 				this.gtrace("nexacro전용브라우져--NOTRANS", gtrcPos);
// 				
// 				this.gfn_onloadSequence();
// 				
// 				return;
// 			}
		}else{
			//	QME기존시스템에서 띄운 경우 == 무조건 QmeLogonUserId값이 있다고 정의
			//	QmeLogonUserId값이 있다면 초기세팅트랜잭션 실행 : UserId를 넘김
			if(!this.gfn_isNull(sQMELOGONUSERID))
			{
				nexacro.getApplication().gds_QmeLogonInfo_in.clearData();
				nexacro.getApplication().gds_QmeLogonInfo_in.addRow();
				nexacro.getApplication().gds_QmeLogonInfo_in.setColumn(0, "p_user_id", sQMELOGONUSERID);
				nexacro.getApplication().gds_Language_in.clearData();
				nexacro.getApplication().gds_Language_in.addRow();
				nexacro.getApplication().gds_Language_in.setColumn(0, "p_country_cd", sLANGUAGEKEY);
			}else{
				alert("비정상접근URL--QMELOGONUSERID없음");
				this.close();
				return;
			}
		}
	}
	
	//	파람세팅+트랜잭
	{
		var sSvcID = "getAllInitData";
		//	var sURL = "AppSvrLocalMsSql::CommonSaveAction_Return.do";
		var sURL = "AppSvr::common/commonAction.ppc";
		var sInDatasets 	= "";
		var sOutDatasets 	= "";
		var sArguments 		= "";
		
		var iSeq = 0;													//	트랜잭션의 Argument에서는 nexacro.getApplication... 안 붙여도 된다 ?
// 		if (nexacro.getApplication().gds_User.rowcount 		== 0)	{sArguments+="UserMapper.getLoginInfo "; 	sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo "; 	sOutDatasets+="gds_User=ds_out"+iSeq+" "; 		iSeq++;}
//   	if (nexacro.getApplication().gds_word.rowcount 		== 0)	{sArguments+="SqlId_00004 "; 	sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo ";	sOutDatasets+="gds_word=ds_out"+iSeq+" "; 		iSeq++;}
		
		this.gtrace("gds_User.rowcount--->"+this.gfn_getApplication().gds_User.rowcount, gtrcPos);
		if(this.gfn_getApplication().gds_User.rowcount == 0 )
		{	// 사용자로그인정보 가져오기 : 있다면 스킵 ( ex. 팝업 )
			sArguments+="UserMapper.getLoginInfo "; 	sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo_in"+" "; 	sOutDatasets+="gds_User=ds_out"+iSeq+" "; 			iSeq++;	//	this.gtrace("iSeq-->"+iSeq, gtrcPos);		
		}
		
		this.gtrace("gds_Language.rowcount--->"+this.gfn_getApplication().gds_Language.rowcount, gtrcPos);
		if(this.gfn_getApplication().gds_Language.rowcount == 0 )
		{	// 언어 가져오기
			sArguments+="CommonMapper.getMultiLang "; 	sInDatasets+="ds_in"+iSeq+"=gds_Language_in"+" ";	sOutDatasets+="gds_Language=ds_out"+iSeq+" "; 			iSeq++;	//	this.gtrace("sArguments-->"+sArguments, gtrcPos);
		}
		
		{	//공통코드정보 가져오기 인풋 추가
			var arrCmmCode;
			if(!this.gfn_isNull(this.COMBO_SET_STR))
			{	// COMBO_SET_STR이 없다면 스킵
				arrCmmCode = this.COMBO_SET_STR.split(" ");
													//	this.gtrace("arrCmmCode.length--->"+arrCmmCode.length, gtrcPos);
					for(var k = 0 ; k < arrCmmCode.length ; k++){
						var tCmmStr = arrCmmCode[k].trim();
						if(tCmmStr !="") {
							var tArr = tCmmStr.split("#");						//	this.gtrace("arrCmmCode["+k+"]--->"+arrCmmCode[k], gtrcPos);
																				//	this.gtrace("tArr[0]--->"+tArr[0], gtrcPos);
																				//	this.gtrace("tArr[1]--->"+tArr[1], gtrcPos);
							var tCommInDs = new Dataset;
								var tCommInDsName = "tCommInDs"+k;
								this.addChild(tCommInDsName, tCommInDs); 
								tCommInDs.copyData(nexacro.getApplication().gds_CommCodeIn);
								tCommInDs.setColumn(tCommInDs.addRow(), "p_code_grp", tArr[1]);
								
								switch(tArr[1]){	// 특이로직
									case "CURRENCY" :	tCommInDs.setColumn(0, "p_sub_cd1", "T");	// 통화
												break;
									default : break;
								}

								sArguments	+=	"CommonMapper.getCodeInfo"		+" ";	//	this.gtrace("sArguments-->"+sArguments, gtrcPos);
								sInDatasets	+=	"ds_in"+iSeq+"="+tCommInDsName	+" ";
								sOutDatasets+=	tArr[0]+"=ds_out"+iSeq			+" ";
								iSeq++;
						}
					}
				}
		}
//   		sArguments+="CommonMapper.getCodeInfo "; 	sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo ";		sOutDatasets+="gds_CommCode=ds_out"+iSeq+" "; 	iSeq++;
//   		sArguments+="CommonMapper.getCodeInfo "; 	sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo ";		sOutDatasets+="gds_CommCode=ds_out"+iSeq+" "; 	iSeq++;

// 		if (nexacro.getApplication().gds_MsgSet.rowcount 	== 0)	{sArguments+="getMsgSet "; 		sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo ";	sOutDatasets+="gds_MsgSet=ds_out"+iSeq+" "; 	iSeq++;}
// 		if (nexacro.getApplication().gds_Logon.rowcount 	== 0)	{sArguments+="getLogon "; 		sInDatasets+="ds_in"+iSeq+"=gds_QmeLogonInfo ";	sOutDatasets+="gds_Logon=ds_out"+iSeq+" "; 		iSeq++;}
																									//	this.gtrace("nexacro.getApplication().gds_User-->"+nexacro.getApplication().gds_User.saveXML(), gtrcPos);
																										this.gtrace("sInDatasets-->"+sInDatasets, gtrcPos);
																										this.gtrace("sOutDatasets-->"+sOutDatasets, gtrcPos);
		//	하나라도 있는 경우에만 트랜잭
						this.gtrace("sArguments-->"+sArguments, gtrcPos);
		if(sArguments !="")
		{
			sArguments = "sqlId=" + nexacro.wrapQuote(sArguments);										
			
			this.transaction(sSvcID, sURL, sInDatasets, sOutDatasets, sArguments, "gfn_callbackFunction");
		}else{
			//	트랜잭션을 하던 안하던 실행되는 함수
			this.gfn_onloadSequence();
		}
	}
}



/*++
@desc	Callback Function
*/
this.gfn_callbackFunction = function(strSvcID, nErrorCode, strErrorMsg)
{
							var gtrcPos = "Util_adh.xjs.gfn_callbackFunction"
	// 에러 체크 영역
	if (nErrorCode < 0) 
	{
		//	alert(this.gfn_removeJavaErrMsg(strErrorMsg));
		alert(strErrorMsg);

		switch (strSvcID) 
		{
			case "getAllInitData":		// 기본 데이터 가져오기인 경우는 바로 닫음.
				this.close();

			default:
				return;
		}
	}

	switch (strSvcID) 
	{
		default:
			break;
		case "getAllInitData":		// 기본 데이터 가져오기 - 콤보Ds세팅
			/*
			 * 공통코드 
			 * AppVariables Datasets gds_commCode에서 구분값에 맞는 코드값 가져오기
			 *
			 * 규칙
			 * Dataset ID는 마지막 4자리를 공통코드 구분자로 지정 ds_deptC001
			 * 
			 * 컴포넌트id 또는 데이터셋id를 지정
			 *  
			 * 여러개 지정시 구분자 스페이스
			 * ":"구분자 이용하여 0이면 "전체", 1이면 "선택하세요" 표현
			 * "전체" 선택시 코드값은 "ALL", "선택하세요" 선택시 코드값은 "" 으로 지정

				compId : 컴포넌트 or Dataset 아이디
				type   : 0(전체), 1(선택하세요)
				this.gfn_getCommCode(compId:type compId2:type2);
				
				ex) this.gfn_getCommCode("cbo_pos rdo_gender:0 Div00.form.cbo_dept:1 ds_hobbyE001");
			 */
																	this.gtrace("this.COMBO_SET_STR--->"+this.COMBO_SET_STR, gtrcPos);
																	//	trace("gds_User.saveXML()--->"+nexacro.getApplication().gds_User.saveXML());
																	//	nexacro.getApplication().gds_User.setColumn(0, "VENDOR_CD", "XXXXX");
																	//	nexacro.getApplication().gds_User.setColumn(0, "USER_ID", "XXXXX");
			var gdsLan = this.gfn_getApplication().gds_Language;
			var aRp;
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.length");		gdsLan.setColumn(aRp, "LANGUAGE", "{0} 의 입력값은 {1} 자리이어야 합니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.rangelength	");	gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.rangelength");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.maxlength");	gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.maxlength");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.minlength");	gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.minlength");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.maxlength");	gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.maxlength");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.minlength");	gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.minlength");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.digits");		gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) 숫자만 입력 가능합니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.min");			gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) {1} 이상의 숫자만 입력 가능합니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.max");			gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) {1} 이하의 숫자만 입력 가능합니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.declimit");		gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) 소숫점 {1} 자리로 구성되어야 합니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.date");			gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) 유효하지 않은 날짜 형식입니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.dateym");		gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.dateym");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.range");		gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.range");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.code");			gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.code");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.equalto");		gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.equalto");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.fromto");		gdsLan.setColumn(aRp, "LANGUAGE", "{0} 의 날짜가 {1} 의 날짜보다 작습니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.comparebig");	gdsLan.setColumn(aRp, "LANGUAGE", "{0} 이(가) {1} 보다 작습니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.comparesmall");	gdsLan.setColumn(aRp, "LANGUAGE", "{0} 이(가) {1} 보다 큽니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.ssn");			gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) 올바른 주민번호가 아닙니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.email");		gdsLan.setColumn(aRp, "LANGUAGE", "msg.err.validator.email");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator.required");		gdsLan.setColumn(aRp, "LANGUAGE", "{0} 은(는) 필수 입력 항목입니다.");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "아이디");						gdsLan.setColumn(aRp, "LANGUAGE", "IIIIIIIIIIIIIIIIId");
				aRp = gdsLan.addRow(); gdsLan.setColumn(aRp, "DEFAULT_LANG", "msg.err.validator");				gdsLan.setColumn(aRp, "LANGUAGE", "{0}");

			//	트랜잭션을 하던 안하던 실행되는 함수
			this.gfn_onloadSequence();
			
			//{0}의 입력값의 길이는 {1} 이하이어야 합니다.
			//	테스트용 : this.gfn_alert("지시 조회", ["사원번호", "5자리"], "A");		

			break;
	}
}

this.gfn_onloadSequence = function(){

	//	타 함수의 집합으로만 구성. 순서에 집중하기 위함
	
	// 공통화	--> 폼 콤포넌트 전체 돌기 실행 ( 포함 : 다국어 + ... )
	this.gfn_formOnLoad(this);
}]]></Script>
